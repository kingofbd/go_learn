package main

import (
	"fmt"
	"sync"
	"time"
)

// 实现一个带有缓冲的通道，生产者协程向通道中发送100个整数，消费者协程从通道中接收这些整数并打印。
func main() {
	// 构建通道（带缓冲）
	ch := make(chan int, 10)

	wg := sync.WaitGroup{}
	wg.Add(2)

	// 发送数据的协程，1秒发送一个数据，发送满10个，共需要10秒
	go func() {
		for i := 1; i <= 100; i++ {
			ch <- i
			fmt.Println("生产者发送了", i)
			time.Sleep(time.Second * 1)
		}
		// 数据发送完毕之后关闭通道
		close(ch)
		defer wg.Done()
	}()

	// 接收数据的协程
	go func() {
		// 检测到通道关闭后会退出for循环
		for num := range ch {
			fmt.Println("消费者接收了", num)
			// 接收完一个数据后，停顿5秒，方便查看通道中的缓冲情况
			time.Sleep(time.Second * 5)
		}
		defer wg.Done()
	}()

	wg.Wait()
	/**
	生产者发送了 1
	消费者接收了 1
	生产者发送了 2
	生产者发送了 3
	生产者发送了 4
	生产者发送了 5
	消费者接收了 2
	生产者发送了 6
	生产者发送了 7
	生产者发送了 8
	生产者发送了 9
	生产者发送了 10
	消费者接收了 3
	生产者发送了 11
	生产者发送了 12
	生产者发送了 13
	消费者接收了 4
	生产者发送了 14
	消费者接收了 5
	生产者发送了 15
	消费者接收了 6
	生产者发送了 16

	通过打印可以看的出来，当后续数据发送和接收稳定的时候，生产者发送的减去消费者接收的，正好等于通道的缓冲数量。16-6=10
	*/
}
